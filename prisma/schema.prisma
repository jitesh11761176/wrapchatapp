// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  USER
}

enum MessageType {
  TEXT
  AI
  EMOJI
  GIF
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("sessions")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  image         String?
  role          Role      @default(USER)
  password      String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts        Account[]
  sessions        Session[]
  messages        Message[]
  chatRoomMembers ChatRoomMember[]
  sentDirectMessages     DirectMessage[] @relation("SentDirectMessages")
  receivedDirectMessages DirectMessage[] @relation("ReceivedDirectMessages")

  @@map("users")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
  @@map("verification_tokens")
}

model ChatRoom {
  id          String           @id @default(cuid())
  name        String
  description String?
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt

  messages Message[]
  members  ChatRoomMember[]

  @@map("chat_rooms")
}

model ChatRoomMember {
  id         String   @id @default(cuid())
  userId     String
  chatRoomId String
  joinedAt   DateTime @default(now())

  user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@unique([userId, chatRoomId])
  @@map("chat_room_members")
}

model Message {
  id         String      @id @default(cuid())
  content    String      @db.Text
  type       MessageType @default(TEXT)
  userId     String?
  chatRoomId String
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  user     User?    @relation(fields: [userId], references: [id], onDelete: SetNull)
  chatRoom ChatRoom @relation(fields: [chatRoomId], references: [id], onDelete: Cascade)

  @@map("messages")
}

model DirectMessage {
  id         String      @id @default(cuid())
  content    String      @db.Text
  type       MessageType @default(TEXT)
  senderId   String
  receiverId String
  read       Boolean     @default(false)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt

  sender   User @relation("SentDirectMessages", fields: [senderId], references: [id], onDelete: Cascade)
  receiver User @relation("ReceivedDirectMessages", fields: [receiverId], references: [id], onDelete: Cascade)

  @@map("direct_messages")
}
